{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Claudio/Downloads/test-project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Subscription, debounceTime, distinct, fromEvent, map, switchMap } from 'rxjs';\nlet MainComponent = class MainComponent {\n  constructor(apiService, cd) {\n    this.apiService = apiService;\n    this.cd = cd;\n    this.API_IMAGES_URL = 'https://storage.googleapis.com/nanlabs-engineering-technical-interviews/imgix-samples-list.json';\n    this.imagesList = [];\n    this.imageSelected = '';\n    this.imageDefault = '../../assets/images/image.png';\n    this.rotateComponentActive = false;\n    this.subscriptions = new Subscription();\n    this.lastDegrees = [];\n    this.rangevalue = 0;\n  }\n  ngOnInit() {\n    this.loadImages();\n    this.rotateDegreesForm = new FormGroup({\n      degrees: new FormControl(0, [Validators.required, Validators.min(0), Validators.max(359)])\n    });\n  }\n  ngAfterViewInit() {\n    this.rotationChanges();\n  }\n  valueChanged(e) {\n    fromEvent(this.brightness.nativeElement, 'mouseup').pipe(map(response => response.target.value), debounceTime(1000), switchMap(response => [this.imageSelected = this.imageSelected + '?bri=' + response]), distinct()).subscribe(result => {\n      console.log(this.imageSelected);\n    });\n  }\n  rotateImage(rotationQuery) {\n    this.imageSelected = this.defaultImageSelectedValue;\n    this.imageSelected = this.imageSelected + rotationQuery;\n    this.lastImageState = this.imageSelected;\n  }\n  undo() {}\n  redo() {}\n  submitChanges() {\n    console.log(this.brightness.nativeElement.value);\n    console.log(this.rotateInput.value);\n  }\n  loadImages() {\n    this.apiService.get(this.API_IMAGES_URL).pipe(map(response => response)).subscribe(Response => this.imagesList = Response);\n  }\n  onSelected(imageUrl) {\n    this.imageSelected = imageUrl == 'default' ? this.imageDefault : imageUrl;\n    this.defaultImageSelectedValue = this.imageSelected;\n    this.lastImageState = this.defaultImageSelectedValue;\n  }\n  rotationChanges() {\n    var _this = this;\n    this.subscriptions.add(this.rotateDegreesForm.controls['degrees'].valueChanges.pipe(debounceTime(1000), distinct(), switchMap( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        if (response > 0 && response < 360) {\n          let rotationQuery = '?rot=' + response;\n          _this.rotateImage(rotationQuery);\n          _this.lastDegrees.push(response);\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }())).subscribe(result => {\n      console.log(this.imageSelected);\n    }));\n  }\n};\n__decorate([ViewChild('rotateInput', {\n  static: true\n})], MainComponent.prototype, \"rotateInput\", void 0);\n__decorate([ViewChild('brightness', {\n  static: true\n})], MainComponent.prototype, \"brightness\", void 0);\nMainComponent = __decorate([Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})], MainComponent);\nexport { MainComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","FormControl","FormGroup","Validators","Subscription","debounceTime","distinct","fromEvent","map","switchMap","MainComponent","constructor","apiService","cd","ngOnInit","loadImages","rotateDegreesForm","degrees","required","min","max","ngAfterViewInit","rotationChanges","valueChanged","e","brightness","nativeElement","pipe","response","target","value","imageSelected","subscribe","result","console","log","rotateImage","rotationQuery","defaultImageSelectedValue","lastImageState","undo","redo","submitChanges","rotateInput","get","API_IMAGES_URL","Response","imagesList","onSelected","imageUrl","imageDefault","subscriptions","add","controls","valueChanges","lastDegrees","push","__decorate","static","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Claudio\\Downloads\\test-project\\src\\app\\pages\\main\\main.component.ts"],"sourcesContent":["import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Subscription, debounceTime, distinct, fromEvent, map, switchMap, tap } from 'rxjs';\nimport { ImageList } from 'src/app/interfaces/imageList';\nimport { ApiService } from 'src/app/services/api.service';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit, AfterViewInit {\n  private API_IMAGES_URL = 'https://storage.googleapis.com/nanlabs-engineering-technical-interviews/imgix-samples-list.json';\n  public imagesList: ImageList[] = [];\n  public imageSelected: string = '';;\n  public imageDefault: string = '../../assets/images/image.png';\n  public rotateComponentActive : boolean = false;\n  public rotateDegreesForm : FormGroup;\n  public subscriptions = new Subscription();\n  public defaultImageSelectedValue : string ;\n  public lastImageState : string ;\n  public lastDegrees : number[] = [] ;\n  public rangevalue : number = 0 ;\n\n  @ViewChild('rotateInput',{ static: true }) rotateInput! : FormControl;\n  @ViewChild('brightness',{ static: true }) brightness! : ElementRef;\n\n\n  constructor(private apiService : ApiService, private cd: ChangeDetectorRef){\n  }\n\n  ngOnInit(): void {\n      this.loadImages();\n      this.rotateDegreesForm = new FormGroup({\n        degrees: new FormControl(0,[\n        Validators.required, Validators.min(0), Validators.max(359)]),\n      })\n  }\n\n  ngAfterViewInit(): void {\n    this.rotationChanges();\n  }\n\n  valueChanged(e : any){\n    fromEvent<Event>(this.brightness.nativeElement, 'mouseup').pipe(\n      map((response : Event) => (response.target as HTMLInputElement).value ),\n      debounceTime(1000),\n      switchMap(response => [\n        this.imageSelected = this.imageSelected + '?bri=' + response\n      ]),\n      distinct(),\n      ).subscribe(result => {\n        console.log(this.imageSelected);\n      });\n  }\n\n  rotateImage(rotationQuery: string){\n    this.imageSelected = this.defaultImageSelectedValue;\n    this.imageSelected = this.imageSelected + rotationQuery;\n    this.lastImageState = this.imageSelected;\n  }\n\n  undo(){\n  }\n\n  redo(){\n  }\n\n  submitChanges(){\n    console.log(this.brightness.nativeElement.value);\n    console.log(this.rotateInput.value);\n  }\n\n\n  loadImages(){\n     this.apiService.get(this.API_IMAGES_URL)\n    .pipe(\n    map((response : ImageList[]) => response)\n    ).subscribe((Response: ImageList[]) => this.imagesList = Response);\n  }\n\n  onSelected(imageUrl: string){\n    this.imageSelected = imageUrl == 'default' ? this.imageDefault : imageUrl;\n    this.defaultImageSelectedValue = this.imageSelected;\n    this.lastImageState = this.defaultImageSelectedValue;\n  }\n\n  rotationChanges(){\n    this.subscriptions.add(this.rotateDegreesForm.controls['degrees'].valueChanges.pipe(\n      debounceTime(1000),\n      distinct(),\n      switchMap(async (response) => {\n        if(response > 0 && response < 360){\n          let rotationQuery = '?rot=' + response;\n          this.rotateImage(rotationQuery);\n          this.lastDegrees.push(response);\n        }\n      })     \n      ).subscribe(result => {\n        console.log(this.imageSelected);\n      }));  \n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}