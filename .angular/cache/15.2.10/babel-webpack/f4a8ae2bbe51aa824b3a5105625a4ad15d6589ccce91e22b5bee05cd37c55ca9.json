{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Claudio/Downloads/test-project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Subscription, debounceTime, distinct, fromEvent, map, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../header/header.component\";\nconst _c0 = [\"rotateInput\"];\nconst _c1 = [\"brightness\"];\nfunction MainComponent_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r5 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", option_r5.url);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r5.name);\n  }\n}\nfunction MainComponent_form_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"form\", 22)(1, \"label\", 23);\n    i0.ɵɵtext(2, \"Degrees\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 24, 25);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.rotateDegreesForm);\n  }\n}\nfunction MainComponent_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 26);\n    i0.ɵɵtext(1, \" Required field and number has to be between 0 and 360 \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class MainComponent {\n  constructor(apiService, cd) {\n    this.apiService = apiService;\n    this.cd = cd;\n    this.API_IMAGES_URL = 'https://storage.googleapis.com/nanlabs-engineering-technical-interviews/imgix-samples-list.json';\n    this.imagesList = [];\n    this.imageSelected = '';\n    this.imageDefault = '../../assets/images/image.png';\n    this.rotateComponentActive = false;\n    this.subscriptions = new Subscription();\n    this.lastDegrees = [];\n    this.rangevalue = 0;\n  }\n  ngOnInit() {\n    this.loadImages();\n    this.rotateDegreesForm = new FormGroup({\n      degrees: new FormControl(0, [Validators.required, Validators.min(0), Validators.max(359)])\n    });\n  }\n  ngAfterViewInit() {\n    this.rotationChanges();\n  }\n  valueChanged(e) {\n    fromEvent(this.brightness.nativeElement, 'mouseup').pipe(map(response => response.target.value), debounceTime(1000), switchMap(response => [this.imageSelected = this.imageSelected + '?bri=' + response]), distinct()).subscribe(result => {\n      console.log(this.imageSelected);\n    });\n  }\n  rotateImage(rotationQuery) {\n    this.imageSelected = this.defaultImageSelectedValue;\n    this.imageSelected = this.imageSelected + rotationQuery;\n    this.lastImageState = this.imageSelected;\n  }\n  undo() {}\n  redo() {}\n  submitChanges() {\n    console.log(this.brightness.nativeElement.value);\n    console.log(this.rotateInput.value);\n  }\n  loadImages() {\n    this.apiService.get(this.API_IMAGES_URL).pipe(map(response => response)).subscribe(Response => this.imagesList = Response);\n  }\n  onSelected(imageUrl) {\n    this.imageSelected = imageUrl == 'default' ? this.imageDefault : imageUrl;\n    this.defaultImageSelectedValue = this.imageSelected;\n    this.lastImageState = this.defaultImageSelectedValue;\n  }\n  rotationChanges() {\n    var _this = this;\n    this.subscriptions.add(this.rotateDegreesForm.controls['degrees'].valueChanges.pipe(debounceTime(1000), distinct(), switchMap( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        if (response > 0 && response < 360) {\n          let rotationQuery = '?rot=' + response;\n          _this.rotateImage(rotationQuery);\n          _this.lastDegrees.push(response);\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }())).subscribe(result => {\n      console.log(this.imageSelected);\n    }));\n  }\n  static #_ = this.ɵfac = function MainComponent_Factory(t) {\n    return new (t || MainComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MainComponent,\n    selectors: [[\"app-main\"]],\n    viewQuery: function MainComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rotateInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.brightness = _t.first);\n      }\n    },\n    decls: 26,\n    vars: 4,\n    consts: [[1, \"row\", \"mt-3\"], [1, \"col-lg-6\", \"offset-lg-3\"], [1, \"text-center\", \"w-100\"], [1, \"form-floating\", \"text-center\"], [\"id\", \"floatingSelect\", 1, \"form-select\", \"w-50\", 3, \"change\"], [\"image\", \"\"], [\"selected\", \"\", \"value\", \"default\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"floatingSelect\"], [1, \"card\", \"mt-3\"], [1, \"card-body\", \"rounded\", \"text-center\", \"card-image\"], [\"alt\", \"\", 1, \"w-50\", \"h-50\", 3, \"src\"], [1, \"text-center\", \"mt-3\", \"w-100\"], [1, \"input-group\", \"input-group-sm\", \"mb-3\", \"mt-3\", \"d-flex\"], [\"class\", \"d-flex\", 3, \"formGroup\", 4, \"ngIf\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"brightness\", 1, \"form-label\"], [\"type\", \"range\", \"min\", \"-100\", \"value\", \"0\", \"max\", \"100\", \"id\", \"brightness\", 1, \"form-range\", 3, \"mouseup\"], [\"brightness\", \"\"], [1, \"row\", \"d-flex\", \"justify-content-center\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"mt-2\", \"text-center\", 3, \"click\"], [3, \"value\"], [1, \"d-flex\", 3, \"formGroup\"], [\"for\", \"rotateInput\", 1, \"rotateLabel\", \"form-label\", \"d-flex\", \"justify-content-center\", \"mr-3\"], [\"type\", \"number\", \"formControlName\", \"degrees\", \"aria-label\", \"Sizing example input\", \"aria-describedby\", \"inputGroup-sizing-sm\", 1, \"form-control\"], [\"rotateInput\", \"\"], [1, \"text-danger\"]],\n    template: function MainComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r7 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelement(0, \"app-header\");\n        i0.ɵɵelementStart(1, \"div\", 0)(2, \"div\", 1)(3, \"div\", 2)(4, \"div\", 3)(5, \"select\", 4, 5);\n        i0.ɵɵlistener(\"change\", function MainComponent_Template_select_change_5_listener() {\n          i0.ɵɵrestoreView(_r7);\n          const _r0 = i0.ɵɵreference(6);\n          return i0.ɵɵresetView(ctx.onSelected(_r0.value));\n        });\n        i0.ɵɵelementStart(7, \"option\", 6);\n        i0.ɵɵtext(8, \"Select Image\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, MainComponent_option_9_Template, 2, 2, \"option\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"label\", 8);\n        i0.ɵɵtext(11, \"Image selection\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(12, \"div\", 9)(13, \"div\", 10);\n        i0.ɵɵelement(14, \"img\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(15, \"div\", 12);\n        i0.ɵɵelementStart(16, \"div\", 13);\n        i0.ɵɵtemplate(17, MainComponent_form_17_Template, 5, 1, \"form\", 14);\n        i0.ɵɵtemplate(18, MainComponent_span_18_Template, 2, 0, \"span\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"label\", 16);\n        i0.ɵɵtext(20, \"Brightness\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"input\", 17, 18);\n        i0.ɵɵlistener(\"mouseup\", function MainComponent_Template_input_mouseup_21_listener($event) {\n          return ctx.valueChanged($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 19)(24, \"button\", 20);\n        i0.ɵɵlistener(\"click\", function MainComponent_Template_button_click_24_listener() {\n          return ctx.submitChanges();\n        });\n        i0.ɵɵtext(25, \"Submit Changes\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", ctx.imagesList);\n        i0.ɵɵadvance(5);\n        i0.ɵɵpropertyInterpolate(\"src\", ctx.imageSelected ? ctx.imageSelected : ctx.imageDefault, i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.imageSelected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.rotateDegreesForm.controls[\"degrees\"].touched && ctx.rotateDegreesForm.controls[\"degrees\"].errors);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i4.HeaderComponent],\n    styles: [\".card-image[_ngcontent-%COMP%] {\\n  background-color: #b0b0b0;\\n}\\n\\n.btn[_ngcontent-%COMP%] {\\n  margin-left: 10px;\\n}\\n\\n.rotateLabel[_ngcontent-%COMP%] {\\n  align-items: center;\\n  margin-right: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvbWFpbi9tYWluLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0kseUJBQUE7QUFDSjs7QUFFQTtFQUNJLGlCQUFBO0FBQ0o7O0FBRUE7RUFDSSxtQkFBQTtFQUNBLGtCQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FyZC1pbWFnZXtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiMGIwYjA7XHJcbn1cclxuXHJcbi5idG57XHJcbiAgICBtYXJnaW4tbGVmdDoxMHB4O1xyXG59XHJcblxyXG4ucm90YXRlTGFiZWx7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","Subscription","debounceTime","distinct","fromEvent","map","switchMap","i0","MainComponent","constructor","apiService","cd","ngOnInit","loadImages","rotateDegreesForm","degrees","required","min","max","ngAfterViewInit","rotationChanges","valueChanged","e","brightness","nativeElement","pipe","response","target","value","imageSelected","subscribe","result","console","log","rotateImage","rotationQuery","defaultImageSelectedValue","lastImageState","undo","redo","submitChanges","rotateInput","get","API_IMAGES_URL","Response","imagesList","onSelected","imageUrl","imageDefault","subscriptions","add","controls","valueChanges","lastDegrees","push","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\Claudio\\Downloads\\test-project\\src\\app\\pages\\main\\main.component.ts","C:\\Users\\Claudio\\Downloads\\test-project\\src\\app\\pages\\main\\main.component.html"],"sourcesContent":["import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Subscription, debounceTime, distinct, fromEvent, map, switchMap, tap } from 'rxjs';\nimport { ImageList } from 'src/app/interfaces/imageList';\nimport { ApiService } from 'src/app/services/api.service';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit, AfterViewInit {\n  private API_IMAGES_URL = 'https://storage.googleapis.com/nanlabs-engineering-technical-interviews/imgix-samples-list.json';\n  public imagesList: ImageList[] = [];\n  public imageSelected: string = '';;\n  public imageDefault: string = '../../assets/images/image.png';\n  public rotateComponentActive : boolean = false;\n  public rotateDegreesForm : FormGroup;\n  public subscriptions = new Subscription();\n  public defaultImageSelectedValue : string ;\n  public lastImageState : string ;\n  public lastDegrees : number[] = [] ;\n  public rangevalue : number = 0 ;\n\n  @ViewChild('rotateInput',{ static: true }) rotateInput! : FormControl;\n  @ViewChild('brightness',{ static: true }) brightness! : ElementRef;\n\n\n  constructor(private apiService : ApiService, private cd: ChangeDetectorRef){\n  }\n\n  ngOnInit(): void {\n      this.loadImages();\n      this.rotateDegreesForm = new FormGroup({\n        degrees: new FormControl(0,[\n        Validators.required, Validators.min(0), Validators.max(359)]),\n      })\n  }\n\n  ngAfterViewInit(): void {\n    this.rotationChanges();\n  }\n\n  valueChanged(e : any){\n    fromEvent<Event>(this.brightness.nativeElement, 'mouseup').pipe(\n      map((response : Event) => (response.target as HTMLInputElement).value ),\n      debounceTime(1000),\n      switchMap(response => [\n        this.imageSelected = this.imageSelected + '?bri=' + response\n      ]),\n      distinct(),\n      ).subscribe(result => {\n        console.log(this.imageSelected);\n      });\n  }\n\n  rotateImage(rotationQuery: string){\n    this.imageSelected = this.defaultImageSelectedValue;\n    this.imageSelected = this.imageSelected + rotationQuery;\n    this.lastImageState = this.imageSelected;\n  }\n\n  undo(){\n  }\n\n  redo(){\n  }\n\n  submitChanges(){\n    console.log(this.brightness.nativeElement.value);\n    console.log(this.rotateInput.value);\n  }\n\n\n  loadImages(){\n     this.apiService.get(this.API_IMAGES_URL)\n    .pipe(\n    map((response : ImageList[]) => response)\n    ).subscribe((Response: ImageList[]) => this.imagesList = Response);\n  }\n\n  onSelected(imageUrl: string){\n    this.imageSelected = imageUrl == 'default' ? this.imageDefault : imageUrl;\n    this.defaultImageSelectedValue = this.imageSelected;\n    this.lastImageState = this.defaultImageSelectedValue;\n  }\n\n  rotationChanges(){\n    this.subscriptions.add(this.rotateDegreesForm.controls['degrees'].valueChanges.pipe(\n      debounceTime(1000),\n      distinct(),\n      switchMap(async (response) => {\n        if(response > 0 && response < 360){\n          let rotationQuery = '?rot=' + response;\n          this.rotateImage(rotationQuery);\n          this.lastDegrees.push(response);\n        }\n      })     \n      ).subscribe(result => {\n        console.log(this.imageSelected);\n      }));  \n  }\n\n}","<app-header></app-header>\n<div class=\"row mt-3\">\n    <div class=\"col-lg-6 offset-lg-3\">\n        <div class=\"text-center w-100\">\n            <div class=\"form-floating text-center\">\n                <select #image (change)=\"onSelected(image.value)\" class=\"form-select w-50\" id=\"floatingSelect\">\n                  <option selected value=\"default\">Select Image</option>\n                  <option *ngFor=\"let option of imagesList\" value=\"{{option.url}}\">{{option.name}}</option>\n                </select>\n                <label for=\"floatingSelect\">Image selection</label>\n              </div>\n        </div>\n        <div class=\"card mt-3\">\n            <div class=\"card-body rounded text-center card-image\">\n                <img class=\"w-50 h-50\" src=\"{{imageSelected ? imageSelected : imageDefault}}\" alt=\"\">\n            </div>\n        </div>\n        <div class=\"text-center mt-3 w-100\">\n            <!-- <button type=\"button\" (click)=\"undo()\" [disabled]=\"lastDegrees.length < 1\" class=\"btn btn-primary\">Undo</button>\n            <button type=\"button\" (click)=\"redo()\" [disabled]=\"!redoEnabled\" class=\"btn btn-primary\">Redo</button> -->\n        </div>\n        <div class=\"input-group input-group-sm mb-3 mt-3 d-flex\">\n            <form *ngIf=\"imageSelected\" [formGroup]=\"rotateDegreesForm\" class=\"d-flex\">\n                <label for=\"rotateInput\" class=\"rotateLabel form-label d-flex justify-content-center mr-3\">Degrees</label>\n                <input #rotateInput type=\"number\" class=\"form-control\" formControlName=\"degrees\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-sm\">\n            </form>\n            <span class=\"text-danger\"\n            *ngIf=\"(rotateDegreesForm.controls['degrees'].touched) && rotateDegreesForm.controls['degrees'].errors\">\n            Required field and number has to be between 0 and 360\n            </span>\n        </div>\n        <label for=\"brightness\" class=\"form-label\">Brightness</label>\n        <input #brightness type=\"range\" (mouseup)=\"valueChanged($event)\"\n        class=\"form-range\" min=\"-100\" value=\"0\" max=\"100\" id=\"brightness\">\n        <div class=\"row d-flex justify-content-center\">\n            <button type=\"button\" (click)=\"submitChanges()\" class=\"btn btn-primary mt-2 text-center\">Submit Changes</button>\n        </div>\n    </div>\n\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}