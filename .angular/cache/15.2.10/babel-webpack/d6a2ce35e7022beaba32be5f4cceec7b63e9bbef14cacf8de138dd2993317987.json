{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { fromEvent, map, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../header/header.component\";\nconst _c0 = [\"rotateInput\"];\nfunction MainComponent_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", option_r3.url);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r3.name);\n  }\n}\nfunction MainComponent_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtext(1, \" Required field and number has to be between 0 and 360 \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class MainComponent {\n  constructor(apiService) {\n    this.apiService = apiService;\n    this.API_IMAGES_URL = 'https://storage.googleapis.com/nanlabs-engineering-technical-interviews/imgix-samples-list.json';\n    this.imagesList = [];\n    this.imageSelected = '';\n    this.imageDefault = '../../assets/images/image.png';\n    this.rotateComponentActive = false;\n  }\n  ngOnInit() {\n    this.loadImages();\n    this.rotateDegreesForm = new FormGroup({\n      degrees: new FormControl(0, [Validators.required, Validators.min(0), Validators.max(359)])\n    });\n  }\n  ngAfterViewInit() {\n    fromEvent(this.rotateInput.nativeElement, 'keyup').pipe(tap(event => console.log(event))).subscribe();\n  }\n  loadImages() {\n    let subscriber$ = this.apiService.get(this.API_IMAGES_URL).pipe(map(response => response)).subscribe(Response => this.imagesList = Response);\n  }\n  onSelected(imageUrl) {\n    this.imageSelected = imageUrl == 'default' ? this.imageDefault : imageUrl;\n  }\n  rotateComponent() {\n    this.rotateComponentActive = this.rotateComponentActive == false ? true : false;\n    console.log(this.rotateComponentActive);\n  }\n  static #_ = this.ɵfac = function MainComponent_Factory(t) {\n    return new (t || MainComponent)(i0.ɵɵdirectiveInject(i1.ApiService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MainComponent,\n    selectors: [[\"app-main\"]],\n    viewQuery: function MainComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rotateInput = _t.first);\n      }\n    },\n    decls: 26,\n    vars: 4,\n    consts: [[1, \"row\", \"mt-3\"], [1, \"col-lg-6\", \"offset-lg-3\"], [1, \"text-center\", \"w-100\"], [1, \"form-floating\", \"text-center\"], [\"id\", \"floatingSelect\", 1, \"form-select\", \"w-50\", 3, \"change\"], [\"image\", \"\"], [\"selected\", \"\", \"value\", \"default\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"floatingSelect\"], [1, \"card\", \"mt-3\"], [1, \"card-body\", \"rounded\", \"text-center\", \"card-image\"], [\"alt\", \"\", 1, \"w-50\", \"h-50\", 3, \"src\"], [1, \"text-center\", \"mt-3\", \"w-100\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\"], [1, \"input-group\", \"input-group-sm\", \"mb-3\", \"mt-3\", \"d-flex\", \"justify-content-center\"], [1, \"d-flex\", \"text-center\", 3, \"formGroup\"], [\"id\", \"inputGroup-sizing-sm\", 1, \"input-group-text\"], [\"type\", \"number\", \"formControlName\", \"degrees\", \"aria-label\", \"Sizing example input\", \"aria-describedby\", \"inputGroup-sizing-sm\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [3, \"value\"], [1, \"text-danger\"]],\n    template: function MainComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r4 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelement(0, \"app-header\");\n        i0.ɵɵelementStart(1, \"div\", 0)(2, \"div\", 1)(3, \"div\", 2)(4, \"div\", 3)(5, \"select\", 4, 5);\n        i0.ɵɵlistener(\"change\", function MainComponent_Template_select_change_5_listener() {\n          i0.ɵɵrestoreView(_r4);\n          const _r0 = i0.ɵɵreference(6);\n          return i0.ɵɵresetView(ctx.onSelected(_r0.value));\n        });\n        i0.ɵɵelementStart(7, \"option\", 6);\n        i0.ɵɵtext(8, \"Select Image\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, MainComponent_option_9_Template, 2, 2, \"option\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"label\", 8);\n        i0.ɵɵtext(11, \"Image selection\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(12, \"div\", 9)(13, \"div\", 10);\n        i0.ɵɵelement(14, \"img\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"div\", 12)(16, \"button\", 13);\n        i0.ɵɵtext(17, \"Undo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"button\", 13);\n        i0.ɵɵtext(19, \"Redo\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 14)(21, \"form\", 15)(22, \"span\", 16);\n        i0.ɵɵtext(23, \"Rotate degrees\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"input\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, MainComponent_span_25_Template, 2, 0, \"span\", 18);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", ctx.imagesList);\n        i0.ɵɵadvance(5);\n        i0.ɵɵpropertyInterpolate(\"src\", ctx.imageSelected ? ctx.imageSelected : ctx.imageDefault, i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.rotateDegreesForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.rotateDegreesForm.controls[\"degrees\"].touched && ctx.rotateDegreesForm.controls[\"degrees\"].errors);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i4.HeaderComponent],\n    styles: [\".card-image[_ngcontent-%COMP%] {\\n  background-color: #b0b0b0;\\n}\\n\\n.btn[_ngcontent-%COMP%] {\\n  margin-left: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvbWFpbi9tYWluLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0kseUJBQUE7QUFDSjs7QUFFQTtFQUNJLGlCQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FyZC1pbWFnZXtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiMGIwYjA7XHJcbn1cclxuXHJcbi5idG57XHJcbiAgICBtYXJnaW4tbGVmdDoxMHB4O1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AACnE,SAASC,SAAS,EAAEC,GAAG,EAAEC,GAAG,QAAQ,MAAM;;;;;;;;;ICKxBC,kCAAiE;IAAAA,YAAe;IAAAA,iBAAS;;;;IAA/CA,gDAAsB;IAACA,eAAe;IAAfA,oCAAe;;;;;IAmBtFA,gCACwG;IACxGA,uEACA;IAAAA,iBAAO;;;ADlBnB,OAAM,MAAOC,aAAa;EASxBC,YAAoBC,UAAuB;IAAvB,eAAU,GAAVA,UAAU;IARtB,mBAAc,GAAG,iGAAiG;IACnH,eAAU,GAAgB,EAAE;IAC5B,kBAAa,GAAW,EAAE;IAC1B,iBAAY,GAAW,+BAA+B;IACtD,0BAAqB,GAAa,KAAK;EAK9C;EAEAC,QAAQ;IACJ,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAACC,iBAAiB,GAAG,IAAIX,SAAS,CAAC;MACrCY,OAAO,EAAE,IAAIb,WAAW,CAAC,CAAC,EAAC,CAC3BE,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,GAAG,CAAC,CAAC,CAAC,EAAEb,UAAU,CAACc,GAAG,CAAC,GAAG,CAAC,CAAC;KAC7D,CAAC;EACN;EAEAC,eAAe;IACXd,SAAS,CAAQ,IAAI,CAACe,WAAW,CAACC,aAAa,EAAE,OAAO,CAAC,CAACC,IAAI,CAC5Df,GAAG,CAAEgB,KAAY,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC,CACxC,CAACG,SAAS,EAAE;EAEnB;EAEAb,UAAU;IACV,IAAIc,WAAW,GAAG,IAAI,CAAChB,UAAU,CAACiB,GAAG,CAAC,IAAI,CAACC,cAAc,CAAC,CACvDP,IAAI,CACLhB,GAAG,CAAEwB,QAAsB,IAAKA,QAAQ,CAAC,CACxC,CAACJ,SAAS,CAAEK,QAAqB,IAAK,IAAI,CAACC,UAAU,GAAGD,QAAQ,CAAC;EAEpE;EAEAE,UAAU,CAACC,QAAgB;IACzB,IAAI,CAACC,aAAa,GAAGD,QAAQ,IAAI,SAAS,GAAG,IAAI,CAACE,YAAY,GAAGF,QAAQ;EAC3E;EAEAG,eAAe;IACb,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,IAAI,KAAK,GAAG,IAAI,GAAG,KAAK;IAC/Ed,OAAO,CAACC,GAAG,CAAC,IAAI,CAACa,qBAAqB,CAAC;EACzC;EAAC;qBA1CU7B,aAAa;EAAA;EAAA;UAAbA,aAAa;IAAA8B;IAAAC;MAAA;;;;;;;;;;;;;;QCX1BhC,6BAAyB;QACzBA,8BAAsB;QAISA;UAAAA;UAAA;UAAA,OAAUA,wCAAuB;QAAA,EAAC;QAC/CA,iCAAiC;QAAAA,4BAAY;QAAAA,iBAAS;QACtDA,oEAAyF;QAC3FA,iBAAS;QACTA,iCAA4B;QAAAA,gCAAe;QAAAA,iBAAQ;QAG3DA,+BAAuB;QAEfA,2BAAqF;QACzFA,iBAAM;QAEVA,gCAAoC;QACcA,qBAAI;QAAAA,iBAAS;QAC3DA,mCAA8C;QAAAA,qBAAI;QAAAA,iBAAS;QAE/DA,gCAAgF;QAEfA,+BAAc;QAAAA,iBAAO;QAC9EA,6BAA8I;QAClJA,iBAAO;QACPA,mEAGO;QACXA,iBAAM;;;QAvB+BA,eAAa;QAAbA,wCAAa;QAOnBA,eAAsD;QAAtDA,2GAAsD;QAQ3EA,eAA+B;QAA/BA,iDAA+B;QAKpCA,eAAqG;QAArGA,4HAAqG","names":["FormControl","FormGroup","Validators","fromEvent","map","tap","i0","MainComponent","constructor","apiService","ngOnInit","loadImages","rotateDegreesForm","degrees","required","min","max","ngAfterViewInit","rotateInput","nativeElement","pipe","event","console","log","subscribe","subscriber$","get","API_IMAGES_URL","response","Response","imagesList","onSelected","imageUrl","imageSelected","imageDefault","rotateComponent","rotateComponentActive","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Users\\Claudio\\Downloads\\test-project\\src\\app\\pages\\main\\main.component.ts","C:\\Users\\Claudio\\Downloads\\test-project\\src\\app\\pages\\main\\main.component.html"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { fromEvent, map, tap } from 'rxjs';\nimport { ImageList } from 'src/app/interfaces/imageList';\nimport { ApiService } from 'src/app/services/api.service';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit, AfterViewInit {\n  private API_IMAGES_URL = 'https://storage.googleapis.com/nanlabs-engineering-technical-interviews/imgix-samples-list.json';\n  public imagesList: ImageList[] = [];\n  public imageSelected: String = '';;\n  public imageDefault: String = '../../assets/images/image.png';\n  public rotateComponentActive : boolean = false;\n  public rotateDegreesForm : FormGroup;\n  @ViewChild('rotateInput',{ static: true }) rotateInput! : ElementRef;\n\n  constructor(private apiService : ApiService){\n  }\n\n  ngOnInit(): void {\n      this.loadImages();\n      this.rotateDegreesForm = new FormGroup({\n        degrees: new FormControl(0,[\n        Validators.required, Validators.min(0), Validators.max(359)]),\n      })\n  }\n\n  ngAfterViewInit(): void {\n      fromEvent<Event>(this.rotateInput.nativeElement, 'keyup').pipe(\n        tap((event: Event) => console.log(event))\n        ).subscribe();\n\n  }\n\n  loadImages(){\n  let subscriber$ = this.apiService.get(this.API_IMAGES_URL)\n    .pipe(\n    map((response : ImageList[]) => response)\n    ).subscribe((Response: ImageList[]) => this.imagesList = Response);\n\n  }\n\n  onSelected(imageUrl: string){\n    this.imageSelected = imageUrl == 'default' ? this.imageDefault : imageUrl;\n  }\n\n  rotateComponent(){\n    this.rotateComponentActive = this.rotateComponentActive == false ? true : false;\n    console.log(this.rotateComponentActive)\n  }\n\n}","<app-header></app-header>\n<div class=\"row mt-3\">\n    <div class=\"col-lg-6 offset-lg-3\">\n        <div class=\"text-center w-100\">\n            <div class=\"form-floating text-center\">\n                <select #image (change)=\"onSelected(image.value)\" class=\"form-select w-50\" id=\"floatingSelect\">\n                  <option selected value=\"default\">Select Image</option>\n                  <option *ngFor=\"let option of imagesList\" value=\"{{option.url}}\">{{option.name}}</option>\n                </select>\n                <label for=\"floatingSelect\">Image selection</label>\n              </div>\n        </div>\n        <div class=\"card mt-3\">\n            <div class=\"card-body rounded text-center card-image\">\n                <img class=\"w-50 h-50\" src=\"{{imageSelected ? imageSelected : imageDefault}}\" alt=\"\">\n            </div>\n        </div>\n        <div class=\"text-center mt-3 w-100\">\n            <button type=\"button\" class=\"btn btn-primary\">Undo</button>\n            <button type=\"button\" class=\"btn btn-primary\">Redo</button>\n        </div>\n        <div class=\"input-group input-group-sm mb-3 mt-3 d-flex justify-content-center\">\n            <form [formGroup]=\"rotateDegreesForm\" class=\"d-flex text-center\">\n                <span class=\"input-group-text\" id=\"inputGroup-sizing-sm\">Rotate degrees</span>\n                <input type=\"number\" class=\"form-control\" formControlName=\"degrees\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-sm\">\n            </form>\n            <span class=\"text-danger\"\n            *ngIf=\"(rotateDegreesForm.controls['degrees'].touched) && rotateDegreesForm.controls['degrees'].errors\">\n            Required field and number has to be between 0 and 360\n            </span>\n        </div>\n    </div>\n\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}